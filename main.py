import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
#–¢–æ–∫—ñ–Ω
bot = telebot.TeleBot('7684408093:AAEg_aOWNdJmHVGKFeNG2pF7oCqeFkDitKo')

#–∫–ª–∞–≤—ñ—à–∏ –¥–ª—è –≥—Ä–∏
keyboard = InlineKeyboardMarkup()
keyboard.row(InlineKeyboardButton('‚Üê', callback_data='left'),
             InlineKeyboardButton('‚Üë', callback_data='up'),
             InlineKeyboardButton('‚Üì', callback_data='down'),
             InlineKeyboardButton('‚Üí', callback_data='right'))

#–ü—É—Å—Ç–∏–π –º–∞—Å–∏–≤ –≤ —è–∫–∏–π –∑–≥–æ–¥–æ–º –±—É–¥–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –º–∞—Ç—Ä–∏—Ü—é
maps = {}

#–ø–æ–±—É–¥–æ–≤–∞ –∫–∞—Ä—Ç–∏
def get_map_str(matrix, player):
    map_str = ""
    for y in range(len(matrix)):
        for x in range(len(matrix[0])):
            if matrix[y][x] == 1:
                map_str += "‚¨õ"  # –°—Ç—ñ–Ω–∞
            elif (x, y) == player:
                map_str += "üî¥"  # –ì—Ä–∞–≤–µ—Ü—å
            else:
                map_str += "‚¨ú"  # –ü—Ä–æ—Ö—ñ–¥
        map_str += "\n"
    return map_str

#–∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def output_start(message):
    with open('technical_textes/text_description.txt', 'r') as file1:
        read_content = file1.read()
    bot.send_message(message.from_user.id, read_content)

#–∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–¥–∞—á—ñ –º–∞—Ç—Ä–∏—Ü—ñ
@bot.message_handler(commands=['take_matrix'])
def take_matrix(message):
    bot.send_message(message.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –º–∞—Ç—Ä–∏—Ü—é —Å—Ö–æ–∂—É –Ω–∞ —Ç—É —è–∫ —É –ø—Ä–∏–∫–ª–∞–¥—ñ")
    bot.register_next_step_handler(message, process_matrix)

#–ø–µ—Ä–µ—Ä–æ–±–∫–∞ –¥–∞–Ω–Ω–∏—Ö —É –ø—ñ–¥—Ö–æ–¥—è—â—ñ –¥–ª—è –≥—Ä–∏
def process_matrix(message):
    try:
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –º–∞—Ç—Ä–∏—Ü—é
        matrix = eval(message.text)
        if not all(isinstance(row, list) for row in matrix) or not all(isinstance(el, int) for row in matrix for el in row):
            raise ValueError

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–∞—Ç—Ä–∏—Ü—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_data = {
            'map': matrix,
            'x': 0,
            'y': 0
        }
        maps[message.chat.id] = user_data

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–∞—Ä—Ç—É –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º –ø–æ–ª–æ–∂–µ–Ω–Ω—è–º –≥—Ä–∞–≤—Ü—è
        bot.send_message(message.from_user.id, get_map_str(matrix, (0, 0)), reply_markup=keyboard)
    except Exception as e:
        bot.send_message(message.from_user.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")

#–º–µ—Ö–∞–Ω—ñ–∑–º —Ä—É—Ö—É
@bot.callback_query_handler(func=lambda call: True)
def callback_func(query):
    user_data = maps.get(query.message.chat.id)
    if not user_data:
        return

    matrix = user_data['map']
    new_x, new_y = user_data['x'], user_data['y']

    # –ó–º—ñ–Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–∞–ø—Ä—è–º–∫—É
    if query.data == 'left':
        new_x -= 1
    elif query.data == 'right':
        new_x += 1
    elif query.data == 'up':
        new_y -= 1
    elif query.data == 'down':
        new_y += 1

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∏—Ö—ñ–¥ –∑–∞ –º–µ–∂—ñ –º–∞—Ç—Ä–∏—Ü—ñ
    if new_x < 0 or new_x >= len(matrix[0]) or new_y < 0 or new_y >= len(matrix):
        return None

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å—Ç—ñ–Ω—É
    if matrix[new_y][new_x] == 1:
        return None

    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≥—Ä–∞–≤—Ü—è
    user_data['x'], user_data['y'] = new_x, new_y

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∏–≥—Ä–∞—à–Ω—É —É–º–æ–≤—É
    if new_x == len(matrix[0]) - 1 and new_y == len(matrix) - 1:
        bot.edit_message_text(chat_id=query.message.chat.id,
                              message_id=query.message.id,
                              text="–í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏!")
        return

    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–∞—Ä—Ç—É –∑ –Ω–æ–≤–æ—é –ø–æ–∑–∏—Ü—ñ—î—é –≥—Ä–∞–≤—Ü—è
    bot.edit_message_text(chat_id=query.message.chat.id,
                          message_id=query.message.id,
                          text=get_map_str(matrix, (new_x, new_y)),
                          reply_markup=keyboard)

#–ó–∞–ø—É—Å–∫
bot.polling(none_stop=True, interval=0)
